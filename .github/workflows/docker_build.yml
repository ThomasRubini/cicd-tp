name: Docker build

on:
  push:
    branches:
      - main
  pull_request:
    branches: ["*"]
    paths:
      - 'Dockerfile'
      - '.dockerignore'
      - '.github/workflows/docker_build.yml'
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.gitignore'

jobs:
  build_docker:
    name: Docker build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
      actions: read
      security-events: write
    env:
      REGISTRY: ghcr.io
      # github.repository as <account>/<repo>
      IMAGE_NAME: ${{ github.repository }}

    steps:
    - uses: actions/checkout@v4
    - name: Log in to the Container registry
      uses: docker/login-action@v3.3.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Needed to use gha caching
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3.10.0
      with: 
        driver: docker-container
        driver-opts: image=moby/buildkit:master,network=host

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5.7.0
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        # We want to tag every commit on main with the 'latest' tag
        # and every git tag with a corresponding docker tag
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=ref,event=tag
          type=sha

    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v6.15.0
      with:
        push: false
        load: true
        context: .
        file: ./Dockerfile
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract first image ID
      id: image_id
      run: |
        echo "IMAGE_ID=$(echo ${{ steps.meta.outputs.tags }} | cut -d ',' -f 1)" >> $GITHUB_ENV

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.IMAGE_ID }}
        format: 'sarif'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Push
      id: push
      if: ${{ steps.meta.outputs.tags != '' }}
      run: |
        echo "Pushing image to registry"
        echo "${{ steps.meta.outputs.tags }}" | xargs -n1 docker push